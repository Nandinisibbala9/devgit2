



unix
--> created the file syustem model  --1mb


rhel --- unix(1mb)+kernel  = RHEL
amazon--unix(1mb)+Kernel


How should we convert monolithic to micro services?
vm----------docker

vm----java application
java version
package type
standalone jar or war (tomcat)
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 password
tell me how to convert to micro services?
Is this app is connecting
we need to ina










scratch+root fs(/ /bin /sbin /tmp /opt)- few linux
scartch+rootfs+application  = 30mb---> Docker Engine  --->Kernel















































GIT
These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.


hp@DESKTOP-OEO46DB MINGW64 ~
$ pwd
/c/Users/hp

hp@DESKTOP-OEO46DB MINGW64 ~
$ cd D:

hp@DESKTOP-OEO46DB MINGW64 /d
$ pwd
/d

hp@DESKTOP-OEO46DB MINGW64 /d
$ mkdir gitprojects

hp@DESKTOP-OEO46DB MINGW64 /d
$ cd gitprojects

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ mkdir project1

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ cd project1/

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1
$ pwd
/d/gitprojects/project1

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1
$ ls -a
./  ../

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1
$ git init
Initialized empty Git repository in D:/gitprojects/project1/.git/

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ pwd
/d/gitprojects/project1

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ git
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ ^C

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ git init
Reinitialized existing Git repository in D:/gitprojects/project1/.git/

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ ls

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ ls -a
./  ../  .git/

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ ls

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects/project1 (master)
$ cd ..

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ ls
project1/

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ mkdir project2

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ cat > a.txt
First line inside a.txt







exit
WQ

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ cat First line inside b.txt
cat: First: No such file or directory
cat: line: No such file or directory
cat: inside: No such file or directory
cat: b.txt: No such file or directory

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ cat b.txt
cat: b.txt: No such file or directory

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ mkdir b.tt

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ mkdir b.txt

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ cat > b.txt
bash: b.txt: Is a directory

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ cat > b1.txt
This line ......

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$ ls
a.txt  b.tt/  b.txt/  b1.txt  project1/  project2/

hp@DESKTOP-OEO46DB MINGW64 /d/gitprojects
$

